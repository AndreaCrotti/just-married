#+AUTHOR: Andrea Crotti
#+TITLE: Getting Married with Clojure
#+OPTIONS: num:nil ^:nil tex:t toc:nil reveal_progress:t reveal_control:t reveal_overview:t
#+REVEAL_TRANS: fade
#+REVEAL_SPEED: fast
#+EMAIL: @andreacrotti
#+TOC: 

* Wedding planning

#+BEGIN_NOTES
If anyone of you organised a wedding (or an event with around 100
people attending), know, organising an even it's a massive amount of
work, which involves coordinating lots of people, planning with
months in advance and so on and so forth.

There are some website generators and other online tools that help you
a bit, but of course nothing beats a totally custom platform, and of
course where would be the fun using some pre made stuff anyway.

In the spirit of Lisp we prefer to write everything ourselves.
#+END_NOTES

[[./images/panic.jpg]]

* The grand plan

#+BEGIN_NOTES
So as long as the dates where set I started working on this side
project, with the goal of making a good looking website and some tools
to help us out with all the grunt work without getting crazy.

The original plan was quite ambitious, with an Italian/English
website, integration with google maps, a way for guests to RVSP
smartly, integration with payments platform for the wedding registry,
a Postgres database to store all the useful information about guests
and even an automated way to generate tables.
#+END_NOTES

- Italian & English public website
- Google maps integration
- Smart RVSP
- Integrated wedding registry (Paypal/Stripe integration)
- Notification system
- Database to store guests
- Table generator

* Reality

[[./images/scheming2.gif]]

* Implementation

** Some stats

- 9 months of development
- 433 commits (with > 10k lines added)
- 50 PRs closed
- 550 Clj SLOC
- 92 Cljc SLOC
- 463 Cljs SLOC

** Backend

- Clojure
- Ring/Compojure
- Postgres
- HoneySQL
- Migratus
- Buddy
- Clj-pdf

** Frontend

- Clojurescript
- Reagent
- Re-frame
- Garden for CSS generation
- Responsive Navbar with CSS Grid

** Other

- CircleCI to run tests
- Deploying on Heroku
- HTTPS with lets encrypt and Heroku
- Separate staging and production environments
- Deploy hooks to notify my wife

* Clojure niceties

** One language to rule them all

#+BEGIN_SRC clojure
  (def sections
    [:find-us
     :timeline
     :accommodation
     :gift
     :rvsp])

#+END_SRC

#+BEGIN_SRC clojure
  (ns just-married.css
    (:require [just-married.shared :refer [sections]]))

  (def num-sections (-> sections count))
  (def menu-size (format "repeat(%d, 1fr)" (inc num-sections)))
  
  (def ^:private body-grid-config
      {:display               "grid"
       :grid-gap              "5px"
       :grid-template-columns "auto 80% auto"
       :grid-template-rows    (repeat-word "auto" num-sections)
       :justify-items         "left"
       :justify-content       "center"
       :width                 "90%"})

#+END_SRC

** Maps support

#+BEGIN_SRC clojure
  (def places
    {:lepri {:lat 42.346799
             :lng 14.164534
             :title "Palazzo Lepri"
             :icon "images/rings_small.png"
             :info "Palazzo Lepri"
             :address "Via la Valletta, 6, 66100 Chieti CH, Italy"
             :website "http://www.palazzolepri.it/"
             :description {:it "Palazzo Lepri"
                           :en "Lepri Palace"}}})

  (def map-configs
    {:wedding {:element-id "map"
               :places [:lepri :princi]
               :center {:lat 42.4
                        :lng 14.2}
               :zoom 12
               :map-type-id "roadmap"}

     :accommodation {}})
#+END_SRC

** Maps config in JS

#+BEGIN_SRC javascript
  var config = window.config;
  function addMap(mapConfig) {
      var mapOptions = {
          zoom: mapConfig.zoom,
          center: new google.maps.LatLng(mapConfig.center.lat, mapConfig.center.lng),
          mapTypeId: mapConfig['map-type-id']
      }
      var map = new google.maps.Map(document.getElementById(mapConfig['element-id']), mapOptions);

      mapConfig.places.forEach(function(placeName) {
          var placeConfig = config.places[placeName];
          addMarker(map, placeConfig);
      });
  }

  addMap(config['maps']['wedding']);

#+END_SRC

** Fill in window.config

#+BEGIN_SRC clojure
  (defn home-page
    [{:keys [language]}]
    (let [env (language common/text)
          client-side-config (json/write-str (assoc config
                                                    :language language))]
      [:html {:lang (name language)}
       (common/header env)
       (when settings/google-analytics-key
         [:script common/ga-js])

       [:body
        [:script (format "window['config']=%s" client-side-config)]
        [:div {:id "app"}]
        ;; now we can easily generate some JS that can be then loaded by
        ;; the frontend to decide which page to display for example
        common/app-js
        [:script "just_married.core.init();"]
        [:script {:src "map.js"}]]]))
#+END_SRC

** Labels and placeholders generation

#+BEGIN_SRC clojure

  (def labels-sql
    (-> (h/select :group_name :country :address)
        (h/from :guests-group)
        (h/where [:and
                  [:= :invitation_sent false]])
        (sql/format)))

  (defn labels-api
    [request]
    (with-basic-auth request
      (let [labels-data     (get-labels!)
            labels-pdf-file (labels labels-data)]

        (-> (resp/file-response labels-pdf-file)
            (resp/content-type "application/pdf")))))
#+END_SRC


* Conclusions

