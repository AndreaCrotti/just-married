#+AUTHOR: Andrea Crotti
#+TITLE: Getting Married with Clojure
#+OPTIONS: num:nil ^:nil tex:t toc:t reveal_progress:t reveal_control:t reveal_overview:t
#+REVEAL_TRANS: fade
#+REVEAL_SPEED: fast
#+EMAIL: @andreacrotti
#+TOC: 

* Wedding planning

#+BEGIN_NOTES
Good afternoon everyone and thanks for coming here instead of watching
the world cup.

I'm Andrea Crotti, I work for Funding Circle. and in case you are
worried by the title of the talk, it should not be taken literally, I
just got married with another human being but created a website with
some extra backend automation to make the organisation of the wedding
easier.

If anyone of you organised a wedding (or an event with around 100
people attending), know, organising an even it's a massive amount of
work, which involves coordinating lots of people, planning with
months in advance and so on and so forth.

There are some website generators and other online tools that help you
a bit, but of course nothing beats a totally custom platform, and of
course where would be the fun using some pre made stuff anyway.

In the spirit of Lisp we prefer to write everything ourselves, so
that's what I'm going to show to you today.
#+END_NOTES

[[./images/panic.jpg]]

** The grand plan

 #+BEGIN_NOTES
 So as long as the dates where set I started working on this side
 project, with the goal of making a good looking website and some tools
 to help us out with all the grunt work without getting crazy.

 The original plan was quite ambitious, with an Italian/English
 website, integration with google maps, a way for guests to RVSP
 smartly, integration with payments platform for the wedding registry,
 a Postgres database to store all the useful information about guests
 and even an automated way to generate tables.
 #+END_NOTES

 - Italian & English public website
 - Google maps integration
 - Smart RVSP
 - Integrated wedding registry (Paypal/Stripe integration)
 - Notification system
 - Database to store guests
 - Table generator

** The Reality

 #+BEGIN_NOTES
 The reality was not as simple however, because for example I had no
 contact information for a lot of the guests, and for many of them
 (friends of my wife family) I didn't even have their physical address.

 As another example, the vast majority of Italian guests would just
 give as the gift in cash, and the ones that would have used a more
 modern solution, could as easily just use bank coordinates, so no
 point really in building something fancy.

 RVSP is another good example, to make something super fancy (with
 auto completion and such) we would have needed names and last names
 of everyone, which I didn't have.  So I ended up doing something much
 simpler, overall I just got less than 10 guests using that. It's
 however still useful to have a way to track their responses of course
 which is what I will show later on.
 #+END_NOTES

 [[./images/scheming2.gif]]

* Implementation

** Lots of work

[[./images/progress.png]]

** Some stats

- 397 commits (with > 10k lines added)
- 50 self approved PRs closed
- 550 Clj SLOC
- 92 Cljc SLOC
- 463 Cljs SLOC

And from Google analytics:
- 183 users from 10 countries
- 1400 page views

** Backend

- Clojure
- Ring/Compojure
- Postgres
- HoneySQL
- Migratus
- Buddy
- Clj-pdf

** Db schema

[[./images/db_schema.png]]

** Frontend

- Clojurescript
- Reagent
- Re-frame
- Garden for CSS generation
- Responsive Navbar with CSS Grid

** Other

- CircleCI to run tests
- Deploying on Heroku
- HTTPS with lets encrypt and Heroku
- Separate staging and production environments
- Deploy hooks to notify my wife

* Interesting code snippets

** One language to rule them all

#+BEGIN_NOTES
I think this is by far the best thing about using Clojure all the way,
by using Clojure, Clojurescript and Garden to generate the CSS from
Clojure data structures, you can really remove any kind of repetition
from your codebase.

This is for example how the different sections of the website are
defined. We simply have a list of sections in shared Cljc file, which
is then used by Clojure, Clojurescript and the css.clj file.  Since I
used CSS grid I still needed to define for example how many rows we
have, which normally would have to be repeated in the CSS files.

This way instead it's just dynamically generated depending on what's
in the cljc file.
#+END_NOTES

#+BEGIN_SRC clojure
  (def sections
    [:find-us
     :timeline
     :accommodation
     :gift
     :rvsp])

#+END_SRC

#+BEGIN_SRC clojure
  (ns just-married.css
    (:require [just-married.shared :refer [sections]]))

  (def num-sections (-> sections count))
  (def menu-size (format "repeat(%d, 1fr)" (inc num-sections)))
  
  (def ^:private body-grid-config
      {:display               "grid"
       :grid-gap              "5px"
       :grid-template-columns "auto 80% auto"
       :grid-template-rows    (repeat-word "auto" num-sections)
       :justify-items         "left"
       :justify-content       "center"
       :width                 "90%"})

#+END_SRC

** Maps support

#+BEGIN_NOTES
Another interesting thing is how Javascript and Clojurescript can easily share information.
For example here we have a simple way to define point of interests that have to show
up in the maps integrated in the website, and a map config that defines which point
of interest will go in each of the maps.
#+END_NOTES

#+BEGIN_SRC clojure
  (def places
    {:lepri {:lat 42.346799
             :lng 14.164534
             :title "Palazzo Lepri"
             :icon "images/rings_small.png"
             :info "Palazzo Lepri"
             :address "Via la Valletta, 6, 66100 Chieti CH, Italy"
             :website "http://www.palazzolepri.it/"
             :description {:it "Palazzo Lepri"
                           :en "Lepri Palace"}}})

  (def map-configs
    {:wedding {:element-id "map"
               :places [:lepri :princi]
               :center {:lat 42.4
                        :lng 14.2}
               :zoom 12
               :map-type-id "roadmap"}

     :accommodation {}})
#+END_SRC

** Maps config in JS

#+BEGIN_NOTES
This is all very nice and declarative, but since I could not manage to
easily do all the Google Maps set up directly with Clojurescript wrappers,
I need to get this configuration somehow available to Javascript, to make
it possible to use it in this code.
#+END_NOTES

#+BEGIN_SRC javascript
  var config = window.config;
  function addMap(mapConfig) {
      var mapOptions = {
          zoom: mapConfig.zoom,
          center: new google.maps.LatLng(mapConfig.center.lat, mapConfig.center.lng),
          mapTypeId: mapConfig['map-type-id']
      }
      var map = new google.maps.Map(document.getElementById(mapConfig['element-id']), mapOptions);

      mapConfig.places.forEach(function(placeName) {
          var placeConfig = config.places[placeName];
          addMarker(map, placeConfig);
      });
  }

  addMap(config['maps']['wedding']);

#+END_SRC

** Fill in window.config

#+BEGIN_NOTES
And this is all you need to actually get something like this to work.
#+END_NOTES

#+BEGIN_SRC clojure
  (defn home-page
    [{:keys [language]}]
    (let [env (language common/text)
          client-side-config (json/write-str (assoc config
                                                    :language language))]
      [:html {:lang (name language)}
       (common/header env)
       (when settings/google-analytics-key
         [:script common/ga-js])

       [:body
        [:script (format "window['config']=%s" client-side-config)]
        [:div {:id "app"}]
        ;; now we can easily generate some JS that can be then loaded by
        ;; the frontend to decide which page to display for example
        common/app-js
        [:script "just_married.core.init();"]
        [:script {:src "map.js"}]]]))
#+END_SRC

** Labels and placeholders generation

API to generate labels:

#+BEGIN_SRC clojure

  (def labels-sql
    (-> (h/select :group_name :country :address)
        (h/from :guests-group)
        (h/where [:and
                  [:= :invitation_sent false]])
        (sql/format)))

  (defn labels-api
    [request]
    (with-basic-auth request
      (let [labels-data     (get-labels!)
            labels-pdf-file (labels labels-data)]

        (-> (resp/file-response labels-pdf-file)
            (resp/content-type "application/pdf")))))
#+END_SRC

Command line to generate placeholders:

#+BEGIN_SRC sh
  lein run generate-placeholders names.txt
#+END_SRC

* Conclusions

#+BEGIN_NOTES
In the end the wedding went very well and everyone was happy, probably
more thanks to the food and the nice day than all the automation done
with Clojure.

One fun fact is that right when the countdown reached zero the website
stopped working throwing a javascript assertion, because the library
used didn't like having a negative time interval, so that's just a
reminder to test things a bit more carefully (and thank God I didn't
have to worry about timezones at least.)
#+END_NOTES

[[./images/sposini.jpg]]
